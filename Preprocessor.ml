# 1 ".\Preprocessor.mll"
 

  open Lexing
  open String
  open List
  
  (* Table qui va associer Ã  une macro son nombre d'arguments et le texte *)
  let macros_table = Hashtbl.create 29
  
  let add_macro name args text =
	Hashtbl.add macros_table name (args,text)

  let get_macro name =
    Hashtbl.find macros_table name
  

# 19 ".\Preprocessor.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\252\255\253\255\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\255\255\014\000\254\255\072\000\040\000\253\255\
    \254\255\039\000\041\000\001\000\255\255\001\000\254\255\002\000\
    \255\255\003\000\004\000\253\255\005\000\255\255\130\000\254\255\
    \233\000\100\000\254\255\101\000\128\000\255\255\006\000\253\255\
    \007\000\000\000\010\000";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\001\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\002\000\255\255\255\255\255\255\255\255\255\255\001\000\
    \255\255\255\255\255\255\255\255\001\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\001\000\255\255\255\255\255\255\255\255\
    \001\000\255\255\000\000";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\012\000\000\000\255\255\015\000\000\000\
    \000\000\018\000\018\000\255\255\000\000\023\000\000\000\025\000\
    \000\000\025\000\028\000\000\000\028\000\000\000\031\000\000\000\
    \255\255\034\000\000\000\036\000\036\000\000\000\040\000\000\000\
    \040\000\255\255\255\255";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\022\000\024\000\024\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \010\000\020\000\000\000\003\000\000\000\000\000\000\000\029\000\
    \255\255\041\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\004\000\005\000\006\000\009\000\
    \016\000\007\000\000\000\000\000\000\000\000\000\008\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\017\000\255\255\000\000\019\000\000\000\
    \000\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\000\000\000\000\035\000\
    \000\000\000\000\255\255\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\037\000\000\000\000\000\
    \002\000\255\255\255\255\255\255\027\000\255\255\039\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\021\000\023\000\025\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \009\000\019\000\255\255\000\000\255\255\255\255\255\255\026\000\
    \028\000\038\000\040\000\255\255\255\255\255\255\255\255\255\255\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\003\000\004\000\005\000\008\000\
    \014\000\006\000\255\255\255\255\255\255\255\255\007\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\255\255\255\255\255\255\255\255\255\255\255\255\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\014\000\017\000\255\255\018\000\255\255\
    \255\255\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\255\255\255\255\033\000\
    \255\255\255\255\035\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\036\000\255\255\255\255\
    \000\000\021\000\023\000\025\000\026\000\028\000\038\000\040\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\011\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\000\
    \014\000\018\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\033\000\035\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \036\000\255\255\030\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec preprocess lexbuf =
    __ocaml_lex_preprocess_rec lexbuf 0
and __ocaml_lex_preprocess_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 24 ".\Preprocessor.mll"
    ( macro_name lexbuf )
# 189 ".\Preprocessor.ml"

  | 1 ->
# 27 ".\Preprocessor.mll"
 ( code_macro "" lexbuf )
# 194 ".\Preprocessor.ml"

  | 2 ->
# 29 ".\Preprocessor.mll"
 ( "" )
# 199 ".\Preprocessor.ml"

  | 3 ->
# 31 ".\Preprocessor.mll"
 ( code (lexeme lexbuf) lexbuf )
# 204 ".\Preprocessor.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_preprocess_rec lexbuf __ocaml_lex_state

and macro_name lexbuf =
    __ocaml_lex_macro_name_rec lexbuf 11
and __ocaml_lex_macro_name_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 36 ".\Preprocessor.mll"
    ( macro_args (lexeme lexbuf) lexbuf )
# 216 ".\Preprocessor.ml"

  | 1 ->
# 38 ".\Preprocessor.mll"
 ( failwith ("Expected only alphabetic characters for a macro name but got : " ^ (lexeme lexbuf)) )
# 221 ".\Preprocessor.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_macro_name_rec lexbuf __ocaml_lex_state

and macro_args name lexbuf =
    __ocaml_lex_macro_args_rec name lexbuf 14
and __ocaml_lex_macro_args_rec name lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 43 ".\Preprocessor.mll"
    ( let nb_args = int_of_string(String.sub (lexeme lexbuf) 1 ((String.length (lexeme lexbuf))-3)) in
		macro_text name nb_args lexbuf )
# 234 ".\Preprocessor.ml"

  | 1 ->
# 46 ".\Preprocessor.mll"
 ( macro_text name 0 lexbuf )
# 239 ".\Preprocessor.ml"

  | 2 ->
# 48 ".\Preprocessor.mll"
 ( failwith ("Expected number of args for the macro or a whitespace but got : " ^ (lexeme lexbuf)) )
# 244 ".\Preprocessor.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_macro_args_rec name lexbuf __ocaml_lex_state

and macro_text name args lexbuf =
    __ocaml_lex_macro_text_rec name args lexbuf 21
and __ocaml_lex_macro_text_rec name args lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 53 ".\Preprocessor.mll"
 ( add_macro name args (sub (lexeme lexbuf) 0 ((String.length (lexeme lexbuf))-1)); preprocess lexbuf )
# 256 ".\Preprocessor.ml"

  | 1 ->
# 55 ".\Preprocessor.mll"
 ( failwith ("Expected the text corresponding to the macro but got : " ^ (lexeme lexbuf)) )
# 261 ".\Preprocessor.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_macro_text_rec name args lexbuf __ocaml_lex_state

and code text lexbuf =
    __ocaml_lex_code_rec text lexbuf 26
and __ocaml_lex_code_rec text lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 60 ".\Preprocessor.mll"
 ( code_macro text lexbuf )
# 273 ".\Preprocessor.ml"

  | 1 ->
# 62 ".\Preprocessor.mll"
 ( code (text^(lexeme lexbuf)) lexbuf )
# 278 ".\Preprocessor.ml"

  | 2 ->
# 64 ".\Preprocessor.mll"
 ( text )
# 283 ".\Preprocessor.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_code_rec text lexbuf __ocaml_lex_state

and code_macro text lexbuf =
    __ocaml_lex_code_macro_rec text lexbuf 30
and __ocaml_lex_code_macro_rec text lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 69 ".\Preprocessor.mll"
    ( let (nb_args,text_macro) = get_macro (lexeme lexbuf) in
		let (args,lexbuf,next_char) = code_args [] nb_args lexbuf in
			let text_macro = (code_text "" args (from_string text_macro))  in
			code (text^text_macro^(String.make 1 next_char)) lexbuf )
# 298 ".\Preprocessor.ml"

  | 1 ->
# 74 ".\Preprocessor.mll"
 ( failwith ("Expected the name of a macro but got : " ^ (lexeme lexbuf)) )
# 303 ".\Preprocessor.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_code_macro_rec text lexbuf __ocaml_lex_state

and code_args list nb_args lexbuf =
    __ocaml_lex_code_args_rec list nb_args lexbuf 33
and __ocaml_lex_code_args_rec list nb_args lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 79 ".\Preprocessor.mll"
 ( let new_arg = sub (lexeme lexbuf) 1 ((String.length (lexeme lexbuf))-2) in
		code_args (new_arg::list) (nb_args-1) lexbuf )
# 316 ".\Preprocessor.ml"

  | 1 ->
let
# 81 ".\Preprocessor.mll"
         next_char
# 322 ".\Preprocessor.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 82 ".\Preprocessor.mll"
 ( if nb_args == 0 then (List.rev list,lexbuf, next_char) else failwith "Wrong number of arguments" )
# 326 ".\Preprocessor.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_code_args_rec list nb_args lexbuf __ocaml_lex_state

and code_text text args lexbuf =
    __ocaml_lex_code_text_rec text args lexbuf 38
and __ocaml_lex_code_text_rec text args lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 87 ".\Preprocessor.mll"
    (let nb = int_of_string(sub (lexeme lexbuf) 1 ((String.length (lexeme lexbuf))-1)) in
		let arg_text = (nth args (nb-1)) in 
		code_text (text^arg_text) args lexbuf )
# 340 ".\Preprocessor.ml"

  | 1 ->
# 91 ".\Preprocessor.mll"
 ( code_text (text^(lexeme lexbuf)) args lexbuf )
# 345 ".\Preprocessor.ml"

  | 2 ->
# 93 ".\Preprocessor.mll"
 ( text )
# 350 ".\Preprocessor.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_code_text_rec text args lexbuf __ocaml_lex_state

;;

